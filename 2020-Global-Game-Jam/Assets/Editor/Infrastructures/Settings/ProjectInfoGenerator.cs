using System.IO;
using System.Text;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEditorInternal;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace Repair.Infrastructures.Settings
{
    public static class ProjectInfoGenerator
    {
        private static readonly string projectInfoTemplate = @"// <autogenerated/>

namespace Repair.Infrastructures.Settings
{{

#region Music

    public enum MusicType
    {{
        Mute,
{4}
    }}

#endregion

#region Music

    public enum SoundType
    {{
        Mute,
{5}
    }}

#endregion
    public static class ProjectInfo
    {{

#region Scenes

        public static class SceneInfos
        {{
{0}
        }}

#endregion

#region Tags

        public static class TagInfos
        {{
{1}
        }}

#endregion

#region Layers

        public static class LayerInfos
        {{
{2}
        }}

#endregion

#region SortingLayers

        public static class SortingLayerInfos
        {{
{3}
        }}

#endregion
    }}
}}
";

        private static readonly string sceneTemplate = "            public static readonly SceneInfo {0} = new SceneInfo(buildIndex: {1}, name: \"{2}\", path: \"{3}\", bundleName: \"{4}\");\n";
        private static readonly string tagTemplate = "            public static readonly TagInfo {0} = new TagInfo(index: {1}, name: \"{2}\");\n";
        private static readonly string layerTemplate = "            public static readonly LayerInfo {0} = new LayerInfo(index: {1}, name: \"{2}\");\n";
        private static readonly string sortingLayerTemplate = "            public static readonly SortingLayerInfo {0} = new SortingLayerInfo(id: {1}, name: \"{2}\");\n";
        private static readonly string musicTemplate = "        {0},\n";
        private static readonly string soundTemplate = "        {0},\n";

        [MenuItem("[PROJECT: Repair]/Generate ProjectInfo")]
        public static void GenerateProjectInfo()
        {
            var activeScene = SceneManager.GetActiveScene();
            if (activeScene.isDirty)
            {
                return;
            }

            var builder = new StringBuilder();
            var scenes = ParseScenes();
            var tags = ParseTags();
            var layers = ParseLayer();
            var sortingLayers = ParseSortingLayer();
            var musics = ParseMusic();
            var sounds = ParseSound();

            builder.AppendFormat(projectInfoTemplate, scenes, tags, layers, sortingLayers, musics, sounds);
            File.WriteAllText("Assets/Script/Infrastructures/Settings/ProjectInfo.cs", builder.ToString());
        }

        private static string ParseScenes()
        {
            var builder = new StringBuilder();
            var guids = AssetDatabase.FindAssets("t:scene");
            foreach (var guid in guids)
            {
                var path = AssetDatabase.GUIDToAssetPath(guid);
                var scene = EditorSceneManager.OpenScene(path, OpenSceneMode.Additive);
                var assetImporter = AssetImporter.GetAtPath(path);
                if (scene.buildIndex == SceneInfo.INVALID_BUILD_INDEX && string.IsNullOrEmpty(assetImporter.assetBundleName))
                {
                    EditorSceneManager.CloseScene(scene, true);
                    continue;
                }

                builder.AppendFormat(sceneTemplate, ParseName(scene.name), scene.buildIndex, scene.name, path, assetImporter.assetBundleName);
                EditorSceneManager.CloseScene(scene, true);
            }

            return builder.ToString();
        }

        private static string ParseTags()
        {
            var builder = new StringBuilder();
            var tags = InternalEditorUtility.tags;
            for (int index = 0; index < tags.Length; ++index)
            {
                var tag = tags[index];
                builder.AppendFormat(tagTemplate, ParseName(tag), index, tag);
            }

            return builder.ToString();
        }

        private static string ParseLayer()
        {
            var builder = new StringBuilder();
            var layers = InternalEditorUtility.layers;
            for (int index = 0; index < LayerInfo.MaxLayerIndex; ++index)
            {
                var layer = InternalEditorUtility.GetLayerName(index);
                if (string.IsNullOrEmpty(layer))
                {
                    continue;
                }

                builder.AppendFormat(layerTemplate, ParseName(layer), index, layer);
            }

            return builder.ToString();
        }

        private static string ParseSortingLayer()
        {
            var builder = new StringBuilder();
            var sortingLayers = SortingLayer.layers;
            for (int index = 0; index < sortingLayers.Length; ++index)
            {
                var sortingLayer = sortingLayers[index];
                builder.AppendFormat(sortingLayerTemplate, ParseName(sortingLayer.name), sortingLayer.id, sortingLayer.name);
            }

            return builder.ToString();
        }

        private static string ParseMusic()
        {
            var builder = new StringBuilder();

            var clips = Resources.LoadAll<AudioClip>("Audios/Musics");
            foreach (var clip in clips)
            {
                builder.AppendFormat(musicTemplate, ParseName(clip.name));
            }

            return builder.ToString();
        }

        private static string ParseSound()
        {
            var builder = new StringBuilder();

            var clips = Resources.LoadAll<AudioClip>("Audios/Sounds");
            foreach (var clip in clips)
            {
                builder.AppendFormat(musicTemplate, ParseName(clip.name));
            }

            return builder.ToString();
        }

        private static string ParseName(string text)
        {
            return text.Replace(" ", "_");
        }
    }
}
